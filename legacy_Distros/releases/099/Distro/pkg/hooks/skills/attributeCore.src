use uo;
use os;
use util;
use cfgfile;

include "include/attributes";
include "include/eventID";
include ":SkillLocks:common";

const CONST_STATCAP := 230;
const CONST_SKILLCAP := 14000;

var attribcfg := ReadConfigFile(":skills:attributes");

program Attribute_server(who)
  SetObjProperty(who, "cap_pid", getpid());
  var ev;
  var counter := ReadGameClock() + 300;
  while(GetObjProperty(who, "LoggedIn"))
	ev := wait_for_event(120);
	if(GetObjProperty(who, "cap_pid") != GetPid())
	  break;
	endif
	// If there's an event and it isn't a command level character then do a skill and stat cap check.
	// This is t6o allow GMs to bypass skill and stat cap limits.
	if(ev)
            case(ev.type)
                EVID_SKILLCAP: CheckSkillCap(who, ev);
                EVID_STATCAP: CheckStatCap(who, ev);
            endcase
	// Otherwise notify them so they don't spend three hours trying to figure out why a freaking GM cannot vendor train!!!!!!
	else
//	    SendSysMessage(who, "Bypassing skill and stat cap check for staff member.", 2, 88);
        endif
    if(counter < ReadgameClock())
      counter := ReadGameClock() + 300;
      Start_Script(":skills:titleCheck", who);
    endif
  endwhile
endprogram

function CheckStatCap(who, ev)
  if(GetAttributeBaseValue(who, ev.skid) < 1000)
    SetAttributeBaseValue(who, ev.skid, Cint(ev.base));
  endif
  var skillid := Cint(ev.skil);
  // The following two linesd were modified/added to get rid of skills.cfg dependancy
  var attribname := AP_SkillIdToAttributeName(skillid);
  var stat := attribcfg[attribname]."DropStat";
  var split := SplitWords(stat);
  var bs := GetBaseStrength(who);
  var bd := GetBaseDexterity(who);
  var bi := GetBaseIntelligence(who);
  if(bs > 100)
    SetBaseStrength(who, 100);
    bs := 100;
  endif
  if(bd > 100)
    SetBaseDexterity(who, 100);
    bd := 100;
  endif
  if(bi > 100)
    SetBaseIntelligence(who, 100);
    bi := 100;
  endif
  var stattotal := CInt(bs + bi + bd);
  if(stattotal > CONST_STATCAP)
    var loops := 1;
    while(stattotal > CONST_STATCAP)
      if(loops > 5)
        break;
      endif
      if(split[2])
        stat := split[RandomInt(2) + 1];
      endif
      case(stat)
        "str": bs := bs - 1;
               SetBaseStrength(who, bs);
        "dex": bd := bd - 1;
               SetBaseDexterity(who, bd);
        "int": bi := bi - 1;
               SetBaseIntelligence(who, bi);
      endcase
      stattotal := Cint(bs + bd + bi);
      loops := loops + 1;
    endwhile
  endif
  return 1;
endfunction

function CheckSkillCap(who, ev)
    var skilltotal := 0;
    var check := 0;
    var loops := 0;
    var holder, newval, final;
    var base, true;
    var attributeid := ev.skid;
    var lower_skill := "";
    var skillarray := {};
    var Total_SkillCap := Cint(Cdbl(skill_settings.TotalCap) * 10);

    foreach thing in GetAttributeIdsWithoutStatIds()
	if(GetAttributeBaseValue(who, thing) > 0)
	    skillarray.append(GetSkillIdByAttributeId(thing));
	endif
    endforeach
    SetObjProperty(who,"SkillArray", skillarray);

    if(GetAttributeBaseValue(who, attributeid) < 1000)
	SetAttributeBaseValue(who, attributeid, Cint(ev.base));
    endif
    if(GetAttributeBaseValue(who, attributeid) > 1000)
	SetAttributeBaseValue(who, attributeid, 1000);
    endif
  while(check == 0)
    if(loops >= 6)
      break;
    endif
    skilltotal := 0;
    foreach thing in skillarray
      true := GetBaseSkillBaseValue(who, thing);
      base := Cint(true - GetAttributeIntrinsicMod(who, GetAttributeIdBySkillId(thing)));
      skilltotal := skilltotal + base;
    endforeach
    if(skilltotal > Total_SkillCap)
	lower_skill := GetLowerSkill(who, skillarray);
	if(lower_skill)
	    holder := GetSkillIdByAttributeId(lower_skill);
	    newval := GetBaseSkillBaseValue(who, holder);
	    final := (newval - 1);
	    SetBaseSkillBaseValue(who, holder, final);
	else
	    newval := GetBaseSkillBaseValue(who, GetSkillIdByAttributeId(attributeid));
	    final := (newval - 1);
	    SetBaseSkillBaseValue(who, GetSkillIdByAttributeId(attributeid), final);
	    SendSysMessage(who, "You are at skill cap.", 2, 45);
	    SendSysMessage(who, "Set another skill to drop.", 2, 45);
	    return 0;
	endif
    else
      check := 1;
    endif
    loops := loops + 1;
  endwhile
  return 1;
endfunction


//////////////////////////////////////////////
// Builds an array of skills set to lower
// selects a random skill from the array
// and returns the attribute id for it.
//
// Parameters:
// who - a character reference.
// skarray an array of non-zero skills.
//
// returned: an attribute id
////////////////////////////////////////////
function GetLowerSkill(who, skarray)

    var sklist := {};
    var attribtolower, rand;

    foreach entry in skarray
	if(SLPH_GetLockState(who, entry) == 1)
	    sklist.append(entry);
	endif
    endforeach

    if(sklist.size())

	rand := RandomDiceRoll("1d" + CStr(sklist.size()));
	attribtolower := GetAttributeIDBySkillID(sklist[rand]);
    else
	attribtolower := "";
    endif
    
    return attribtolower;
    
endfunction
