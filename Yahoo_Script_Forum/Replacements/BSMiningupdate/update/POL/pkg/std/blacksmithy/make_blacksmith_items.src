/////////////////
// make_blacksmith_items.src
//
// Use a smithy hammer to either repair arms & armor or
// to work with metal to create new items. You need to be
// skillful to work with the rarer metals.
//
// TODO: remove hardcoding of skill pointvalue
//
// Author: DreamWeaver:
//              original
//         Racalac:
//              colored items
// Updates: Dream Weaver 6/3/99 handled item quality an HP to new specs
//          Ignatius     99/06/10 added name of maker to exceptional items.		
////////////////

use uo;
use cfgfile;
use os;
use util;
use basicio;

include "util/repair";
include "include/client";
include "include/objtype";

Global itemcfg   := ReadConfigFile(":combat:itemdesc");
Global smith_cfg := ReadConfigFile( "blacksmithy" );    
Global itemname;
// called when a player double-clicks a hammer or other blacksmith tool
program use_hammer( character, hammer )

    SendSysmessage( character, "What would you like to use that on?" );
    Local use_on := Target( character );
    if( !use_on )
        SendSysmessage( character, "Targetting cancelled" );
        return;
    endif

	ReserveItem(use_on);
    
    if( is_weapon_armor(use_on.objtype) )
        repair_item( character, use_on, SKILLID_BLACKSMITHY );
        return;
    endif
    
    if( (use_on.objtype < UOBJ_INGOTS_START1) or  (use_on.objtype > UOBJ_INGOTS_END2))
        SendSysMessage( character, "You can only use that on ingots!" );       
        return;
    endif

    if( !CheckSkillForDifferentMetals( character , use_on ) )
        SendSysmessage( character, "You have no chance to successfully work with that." );
        return;
    endif

    Local Near_Items := ListItemsNearLocation(character.x, character.y, character.z,2);
    foreach item in Near_Items
         if ((item.objtype = UOBJ_ANVIL1) or (item.objtype = UOBJ_ANVIL2))
              MakeBlacksmithItems(character, use_on);
              Return;
         endif
    endforeach
    SendSysmessage( character, "You must be near an anvil to smith items!" );
       
endprogram


function is_weapon_armor(what)
    local elem := FindConfigElem(itemcfg, what);
    if (elem)
        return 1;
    else
        return 0;
    endif
endfunction

function MakeBlacksmithItems( character, ingots )
    local skill;          //skill needed to create the item
    local element;        // entry in smith_config
    local material;       //amount of material needed to create the item
    local points;
    local retval;
    local maxhp;
    local quality;
        
    
    if ( !Accessible( character, ingots))
        SendSysmessage( character, "You don't have any ingots!" );
        return;
    endif
    
    if (!smith_cfg)
        SendSysmessage (character, "Could not open blacksmith.cfg");
        return;
    endif
    
    local what := SelectMenuItem2( character, "blacksmith" );
    if ( !what )
          SendSysmessage( character, "Targetting cancelled" );
          return;
    endif

    what := what.objtype;
    maxhp := itemcfg[what].maxhp;
    element := FindConfigElem( smith_cfg,what ); //need to make sure the key reflects the menu return value
    
    if (element)
        material := GetConfigInt( element, "material" );
        skill := GetConfigInt( element, "skill" );
        itemname := GetConfigString( element, "Name") ;
        points := GetConfigInt( element , "points" );
    else
        print("Bad stuff goin on!");
    endif
    //first, check to see that they have enough ingots
 
    if ( GetAmount(ingots)  > material )
            retval := PlaySoundEffect(character, SFX_ANVIL);
            sleep (2);
            retval := PlaySoundEffect(character, SFX_ANVIL);
            sleep (2);
            retval := PlaySoundEffect(character, SFX_ANVIL);
            sleep (2);

        if( ingots.color != 0 )
            points := points * 2;
        endif

        if (CheckSkill( character, SKILLID_BLACKSMITHY, skill, points ))
            Local theitem := CreateItemInBackpack( character, what, 1 );
        

            if (theitem) //they sucessfully create the item
                theitem.color := ingots.color; //for colored ingots!

                SubtractAmount( ingots, material );

                if (CheckSkill( character, SKILLID_BLACKSMITHY, 90, points ) and randomint(100) < 30)  //check2
                    //they make an exceptional item
                    quality := 1.5;
                    theitem.quality := quality;
                    theitem.hp := theitem.maxhp;
                    SetObjProperty(theitem, "type","b");
		        add_special_ingot_bonus( theitem, ingots );
                    local tname := "Exceptional " + itemname + " [crafted by " + character.name + "]" ;
                    SetName(theitem, tname);
                    SendSysmessage (character, "You make an exceptional item and put it in your pack");
                else  //check2
                    //regular-quality
                    theitem.quality := (60 + (randomint(getskill(character, SKILLID_BLACKSMITHY))/2))/100.0;
                    theitem.hp := theitem.maxhp;
                    SetObjProperty(theitem, "type","b");
		        add_special_ingot_bonus( theitem, ingots );
                    SetName(theitem,  itemname );
                    SendSysmessage( character, "You create the item and place it in your pack." );
                endif //check2
            endif //theitem
        else  //checkskill
            SubtractAmount( ingots, 1 );
            SendSysmessage( character, "You destroy some ingots." );
        endif //checkskill
    else 
        SendSysmessage (character, "You don't have enough ingots!");
        return;
    endif  //getamount
  
endfunction


function CheckSkillForDifferentMetals( character , ingot )

    case( ingot.objtype )
        UOBJ_IRON_INGOT: return 1;   //anyone can work with iron
        UOBJ_BRONZE_INGOT: return (CheckHisSkill( character , 60 ));
        UOBJ_DULLCOPPER_INGOT: return (CheckHisSkill( character , 65 ));
        UOBJ_COPPER_INGOT: return (CheckHisSkill( character , 65 ));
        UOBJ_PYRITE_INGOT: return (CheckHisSkill( character , 67 ));
        UOBJ_MALACHITE_INGOT: return (CheckHisSkill( character , 67 ));
        UOBJ_RUSTY_INGOT: return (CheckHisSkill( character , 70 ));
        UOBJ_ROSE_INGOT: return (CheckHisSkill( character , 70 ));
        UOBJ_OLDCOPPER_INGOT: return (CheckHisSkill( character , 70 ));
        UOBJ_SHADOW_INGOT: return (CheckHisSkill( character , 70 ));
        UOBJ_SILVER_INGOT: return (CheckHisSkill( character , 70 ));
        UOBJ_GOLDM_INGOT: return (CheckHisSkill( character , 70 ));
        UOBJ_ONYX_INGOT: return (CheckHisSkill( character , 75 ));
        UOBJ_AGAPITE_INGOT: return (CheckHisSkill( character , 75 ));
        UOBJ_VALORITE_INGOT: return (CheckHisSkill( character , 75 ));
        UOBJ_VERITE_INGOT: return (CheckHisSkill( character , 80 ));
        UOBJ_MYTHERIL_INGOT: return (CheckHisSkill( character , 80 ));
        UOBJ_BLOODROCK_INGOT: return (CheckHisSkill( character , 90 ));
        UOBJ_AZURITE_INGOT: return (CheckHisSkill( character , 95 ));
        UOBJ_ROYAL_INGOT: return (CheckHisSkill( character , 99 ));
        default: SendSysmessage( character , "You can't smelt that." );
    endcase
endfunction

function CheckHisSkill( character , skill )

    local his_skill := GetSkill( character , SKILLID_BLACKSMITHY );

    if( his_skill >= skill )
        return 1;
    else
        return 0;
    endif
endfunction

function add_special_ingot_bonus( theitem, ingots )
	
	case( ingots.objtype )
        	UOBJ_IRON_INGOT: return( theitem );
        	UOBJ_BRONZE_INGOT: b_bronze ( theitem );
		UOBJ_DULLCOPPER_INGOT: b_DullCopper( theitem );
        	UOBJ_COPPER_INGOT: b_Copper( theitem );
        	UOBJ_PYRITE_INGOT: b_pyrite( theitem );
        	UOBJ_MALACHITE_INGOT: b_Malachite( theitem );
	      UOBJ_RUSTY_INGOT: b_Rusty( theitem );
	      UOBJ_ROSE_INGOT: b_Rose( theitem );
	      UOBJ_OLDCOPPER_INGOT: b_Oldcopper( theitem );
	      UOBJ_SHADOW_INGOT: b_Shadow( theitem );
	      UOBJ_SILVER_INGOT: b_Silver( theitem );
	      UOBJ_GOLDM_INGOT: b_Goldm( theitem );
	      UOBJ_ONYX_INGOT: b_Onyx( theitem );
	      UOBJ_AGAPITE_INGOT: b_Agapite( theitem );
	      UOBJ_VALORITE_INGOT: b_Valorite( theitem );
	      UOBJ_VERITE_INGOT: b_Verite( theitem );
	      UOBJ_MYTHERIL_INGOT: b_Mytheril( theitem );
	      UOBJ_BLOODROCK_INGOT: b_Bloodrock( theitem );
        	UOBJ_AZURITE_INGOT: b_Azurite( theitem );
	      UOBJ_ROYAL_INGOT: b_Royal( theitem );
        	default: return( theitem ); //something funky has happened - return item unchanged
	endcase
endfunction

function b_Bronze( theitem )  
theitem.ar_mod := 1;
itemname:= "bronze " + itemname;
SetObjProperty(theitem, "bra",1); //for special Abilitys Later
endfunction

function b_DullCopper( theitem )
theitem.ar_mod := 1;
itemname:= "dull copper " + itemname;
SetObjProperty(theitem, "dca",1); //for special Abilitys Later
endfunction

function b_Copper( theitem )
theitem.ar_mod := 1;
itemname:= "copper " + itemname;
SetObjProperty(theitem, "coa",1); //for special Abilitys Later
endfunction

function b_pyrite( theitem )
theitem.ar_mod := 2;
itemname:= "pyrite " + itemname;
SetObjProperty(theitem, "pya",1); //for special Abilitys Later
endfunction

function b_Malachite( theitem )
theitem.ar_mod := 2;
itemname:= "malachite " + itemname;
SetObjProperty(theitem, "maa",1); //for special Abilitys Later
endfunction

function b_Rusty( theitem )
theitem.ar_mod := 2;
itemname:= "rust colored " + itemname;
SetObjProperty(theitem, "rua",1); //for special Abilitys Later
endfunction

function b_Rose( theitem )
theitem.ar_mod := 3;
itemname:= "rose colored " + itemname;
SetObjProperty(theitem, "roa",1); //for special Abilitys Later
endfunction

function b_Oldcopper( theitem )
theitem.ar_mod := 3;
itemname:= "old copper " + itemname;
SetObjProperty(theitem, "oca",1); //for special Abilitys Later
endfunction

function b_Shadow( theitem )
theitem.ar_mod := 3;
itemname:= "shadow " + itemname;
SetObjProperty(theitem, "sha",1); //for special Abilitys Later
endfunction

function b_Silver( theitem )
theitem.ar_mod := 4;
itemname:= "silver " + itemname;
SetObjProperty(theitem, "sia",1); //for special Abilitys Later
endfunction

function b_Goldm( theitem )
theitem.ar_mod := 4;
itemname:= "golden " + itemname;
SetObjProperty(theitem, "goa",1); //for special Abilitys Later
endfunction

function b_Onyx( theitem )
theitem.ar_mod := 4;
itemname:= "black rock " + itemname;
SetObjProperty(theitem, "ona",1); //for special Abilitys Later
endfunction

function b_Agapite( theitem )
theitem.ar_mod := 5;
itemname:= "agapite " + itemname;
SetObjProperty(theitem, "aga",1); //for special Abilitys Later
endfunction

function b_Valorite( theitem )
theitem.ar_mod := 5;
itemname:= "valorite " + itemname;
SetObjProperty(theitem, "vaa",1); //for special Abilitys Later
endfunction

function b_Verite( theitem )
theitem.ar_mod := 5;
itemname:= "verite " + itemname;
SetObjProperty(theitem, "vea",1); //for special Abilitys Later
endfunction

function b_Mytheril( theitem )
theitem.ar_mod := 6;
itemname:= "mytheril " + itemname;
SetObjProperty(theitem, "mya",1); //for special Abilitys Later
endfunction

function b_Bloodrock( theitem )
theitem.ar_mod := 6;
itemname:= "blood rock " + itemname;
SetObjProperty(theitem, "bla",1); //for special Abilitys Later
endfunction

function b_Azurite( theitem )
theitem.ar_mod := 6;
itemname:= "azurite " + itemname;
SetObjProperty(theitem, "aza",1); //for special Abilitys Later
endfunction

function b_Royal( theitem )
theitem.ar_mod := 7;
itemname:= "royal " + itemname;
SetObjProperty(theitem, "roa",1); //for special Abilitys Later
endfunction
